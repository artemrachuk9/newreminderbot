import telebot
import threading
import time
import re
import requests
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
from telebot import types

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

reminders = []
user_locations = {}  # chat_id ‚Üí (lat, lon)
user_languages = {}  # chat_id ‚Üí 'uk', 'ru', 'en'

MESSAGES = {
    "uk": {
        "start": "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–Ω–∞–≥–∞–¥—É–≤–∞—á üìÖ\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —â–æ—Å—å —Ç–∏–ø—É:\nüëâ –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –º–∞–º–∏\nüëâ –∑—É—Å—Ç—Ä—ñ—á 12.09\n–Ü —è –Ω–∞–≥–∞–¥–∞—é —Ç–æ–±—ñ —É —Ü–µ–π –¥–µ–Ω—å + –Ω–∞–¥—ñ—à–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏!\n\n–©–æ–± –ø—Ä–æ–≥–Ω–æ–∑ –±—É–≤ —Ç–æ—á–Ω–∏–º ‚Äî –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ:\nüìù –ø—Ä–∏–∫–ª–∞–¥: \"–º—ñ—Å—Ç–æ –ù—å—é-–ô–æ—Ä–∫\" –∞–±–æ \"–ø–æ–≥–æ–¥–∞ –ö–∏—ó–≤\"",
        "choose_lang": "üåç –û–±–µ—Ä–∏ –º–æ–≤—É / Choose your language:",
        "saved_city": "‚úÖ –ú—ñ—Å—Ç–æ \"{}\" –∑–±–µ—Ä–µ–∂–µ–Ω–æ!",
        "city_not_found": "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ \"{}\"",
        "weather": "üå¶ –ü–æ–≥–æ–¥–∞ –≤ \"{}\":\n{}",
        "reminder_saved": "‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ {}\nüå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏: {}",
        "no_date": "ü§î –Ø –Ω–µ –∑–Ω–∞–π—à–æ–≤ –¥–∞—Ç—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n–ù–∞–ø–∏—à–∏ —â–æ—Å—å —Ç–∏–ø—É: \"–∑—É—Å—Ç—Ä—ñ—á 12.09\" –∞–±–æ \"–∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –º–∞–º–∏\"",
        "today_reminder": "üìå –°—å–æ–≥–æ–¥–Ω—ñ: {}"
    },
    "ru": {
        "start": "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üìÖ\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:\nüëâ –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã\nüëâ –≤—Å—Ç—Ä–µ—á–∞ 12.09\n–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å + –ø—Ä–∏—à–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã!\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–≥–Ω–æ–∑ –±—ã–ª —Ç–æ—á–Ω—ã–º ‚Äî –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:\nüìù –ø—Ä–∏–º–µ—Ä: \"–≥–æ—Ä–æ–¥ –ù—å—é-–ô–æ—Ä–∫\" –∏–ª–∏ \"–ø–æ–≥–æ–¥–∞ –ö–∏–µ–≤\"",
        "choose_lang": "üåç –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Choose your language:",
        "saved_city": "‚úÖ –ì–æ—Ä–æ–¥ \"{}\" —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        "city_not_found": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ \"{}\"",
        "weather": "üå¶ –ü–æ–≥–æ–¥–∞ –≤ \"{}\":\n{}",
        "reminder_saved": "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ {}\nüå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã: {}",
        "no_date": "ü§î –Ø –Ω–µ –Ω–∞—à—ë–ª –¥–∞—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: \"–≤—Å—Ç—Ä–µ—á–∞ 12.09\" –∏–ª–∏ \"–∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã\"",
        "today_reminder": "üìå –°–µ–≥–æ–¥–Ω—è: {}"
    },
    "en": {
        "start": "Hi! I'm your reminder bot üìÖ\n\nJust type something like:\nüëâ tomorrow is mom's birthday\nüëâ meeting on 12.09\nI'll remind you on that day + send the weather forecast!\n\nTo get accurate weather ‚Äî tell me your city:\nüìù example: \"city New York\" or \"weather Kyiv\"",
        "choose_lang": "üåç Choose your language:",
        "saved_city": "‚úÖ City \"{}\" saved!",
        "city_not_found": "‚ö†Ô∏è Couldn't find city \"{}\"",
        "weather": "üå¶ Weather in \"{}\":\n{}",
        "reminder_saved": "‚úÖ Reminder saved for {}\nüå¶ Weather forecast: {}",
        "no_date": "ü§î I couldn't find a date in your message.\nTry something like: \"meeting on 12.09\" or \"tomorrow is mom's birthday\"",
        "today_reminder": "üìå Today: {}"
    }
}

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß")
    bot.send_message(message.chat.id, MESSAGES["uk"]["choose_lang"], reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"])
def set_language(msg):
    lang_map = {
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶": "uk",
        "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru",
        "English üá¨üáß": "en"
    }
    user_languages[msg.chat.id] = lang_map[msg.text]
    lang = user_languages[msg.chat.id]
    bot.send_message(msg.chat.id, MESSAGES[lang]["start"])

def extract_date(text):
    text = text.lower()
    today = datetime.now().date()

    if "–∑–∞–≤—Ç—Ä–∞" in text or "tomorrow" in text:
        return today + timedelta(days=1)

    months_uk = {
        '—Å—ñ—á–Ω—è': 1, '–ª—é—Ç–æ–≥–æ': 2, '–±–µ—Ä–µ–∑–Ω—è': 3, '–∫–≤—ñ—Ç–Ω—è': 4,
        '—Ç—Ä–∞–≤–Ω—è': 5, '—á–µ—Ä–≤–Ω—è': 6, '–ª–∏–ø–Ω—è': 7, '—Å–µ—Ä–ø–Ω—è': 8,
        '–≤–µ—Ä–µ—Å–Ω—è': 9, '–∂–æ–≤—Ç–Ω—è': 10, '–ª–∏—Å—Ç–æ–ø–∞–¥–∞': 11, '–≥—Ä—É–¥–Ω—è': 12
    }

    months_en = {
        'january': 1, 'february': 2, 'march': 3, 'april': 4,
        'may': 5, 'june': 6, 'july': 7, 'august': 8,
        'september': 9, 'october': 10, 'november': 11, 'december': 12
    }

    match = re.search(r'(\d{1,2})[.\-/](\d{1,2})', text)
    if match:
        day, month = int(match.group(1)), int(match.group(2))
        try:
            return datetime(datetime.now().year, month, day).date()
        except:
            return None

    match = re.search(r'(\d{1,2})\s+(—Å—ñ—á–Ω—è|–ª—é—Ç–æ–≥–æ|–±–µ—Ä–µ–∑–Ω—è|–∫–≤—ñ—Ç–Ω—è|—Ç—Ä–∞–≤–Ω—è|—á–µ—Ä–≤–Ω—è|–ª–∏–ø–Ω—è|—Å–µ—Ä–ø–Ω—è|–≤–µ—Ä–µ—Å–Ω—è|–∂–æ–≤—Ç–Ω—è|–ª–∏—Å—Ç–æ–ø–∞–¥–∞|–≥—Ä—É–¥–Ω—è)', text)
    if match:
        day = int(match.group(1))
        month = months_uk.get(match.group(2))
        try:
            return datetime(datetime.now().year, month, day).date()
        except:
            return None

    match = re.search(r'(\d{1,2})\s+(january|february|march|april|may|june|july|august|september|october|november|december)', text)
    if match:
        day = int(match.group(1))
        month = months_en.get(match.group(2))
        try:
            return datetime(datetime.now().year, month, day).date()
        except:
            return None

    match = re.search(r'(january|february|march|april|may|june|july|august|september|october|november|december)\s+(\d{1,2})', text)
    if match:
        month = months_en.get(match.group(1))
        day = int(match.group(2))
        try:
            return datetime(datetime.now().year, month, day).date()
        except:
            return None

    return None

def get_coordinates_by_city(city_name):
    url = f"https://nominatim.openstreetmap.org/search?format=json&q={city_name}"
    try:
        response = requests.get(url, headers={"User-Agent": "weather-bot"})
        data = response.json()
        if data:
            lat = float(data[0]['lat'])
            lon = float(data[0]['lon'])
            return lat, lon
    except:
        pass
    return None

def get_weather_forecast(date_obj, lat=52.4420, lon=4.8292, hour=12):
    date_str = date_obj.strftime('%Y-%m-%d')
    hour_str = f"{hour:02d}:00"
    url = (
        f"https://api.open-meteo.com/v1/forecast?"
        f"latitude={lat}&longitude={lon}&hourly=temperature_2m,"
        f"relative_humidity_2m,wind_speed_10m&timezone=Europe/Amsterdam"
    )

    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            target_time = f"{date_str}T{hour_str}"
            if target_time in data['hourly']['time']:
                index = data['hourly']['time'].index(target_time)
                temp = data['hourly']['temperature_2m'][index]
                humidity = data['hourly']['relative_humidity_2m'][index]
                wind = data['hourly']['wind_speed_10m'][index]

                if temp >= 20 and humidity < 60:
                    comment = "‚òÄ –ì–∞—Ä–Ω–∏–π –¥–µ–Ω—å! –ù–µ –∑–∞–±—É–¥—å –æ–∫—É–ª—è—Ä–∏ üòé"
                elif humidity > 80 or wind > 10:
                    comment = "üåß –ú–æ–∂–µ –±—É—Ç–∏ –Ω–µ–ø–æ–≥–æ–¥–∞ ‚Äî –±—É–¥—å –æ–±–µ—Ä–µ–∂–Ω–∏–π!"
                else:
                    comment = "üå§ –ó–≤–∏—á–∞–π–Ω–∞ –ø–æ–≥–æ–¥–∞, –≤—Å–µ –æ–∫!"

                return f"{temp}¬∞C, –≤–æ–ª–æ–≥—ñ—Å—Ç—å {humidity}%, –≤—ñ—Ç–µ—Ä {wind} –∫–º/–≥–æ–¥\n{comment}"
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏"
    except:
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏"

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.strip()
    lang = user_languages.get(message.chat.id, "uk")

    if any(text.lower().startswith(prefix) for prefix in ["–º—ñ—Å—Ç–æ ", "–≥–æ—Ä–æ–¥ ", "city "]):
        city_name = re.sub(r"^(–º—ñ—Å—Ç–æ|–≥–æ—Ä–æ–¥|city)\s+", "", text, flags=re.IGNORECASE).strip()
        coords = get_coordinates_by_city(city_name)
        if coords:
            user_locations[message.chat.id] = coords
            bot.send_message(message.chat.id, MESSAGES[lang]["saved_city"].format(city_name))
        else:
            bot.send_message(message.chat.id, MESSAGES[lang]["city_not_found"].format(city_name))
        return

    if text.lower().startswith("–ø–æ–≥–æ–¥–∞ ") or text.lower().startswith("weather "):
        city_name = re.sub(r"^(–ø–æ–≥–æ–¥–∞|weather)\s+", "", text, flags=re.IGNORECASE).strip()
        coords = get_coordinates_by_city(city_name)
        if coords:
            user_locations[message.chat.id] = coords
            forecast = get_weather_forecast(datetime.now().date(), lat=coords[0], lon=coords[1])
            bot.send_message(message.chat.id, MESSAGES[lang]["weather"].format(city_name, forecast))
        else:
            bot.send_message(message.chat.id, MESSAGES[lang]["city_not_found"].format(city_name))
        return

    date = extract_date(text)
    if date:
        reminders.append((message.chat.id, date, text))
        latlon = user_locations.get(message.chat.id, (52.4420, 4.8292))
        forecast = get_weather_forecast(date, lat=latlon[0], lon=latlon[1])
        bot.send_message(message.chat.id, MESSAGES[lang]["reminder_saved"].format(date.strftime('%d.%m'), forecast))
    else:
        bot.send_message(message.chat.id, MESSAGES[lang]["no_date"])

def reminder_checker():
    while True:
        today = datetime.now().date()
        for r in reminders[:]:
            chat_id, r_date, text = r
            if r_date == today:
                lang = user_languages.get(chat_id, "uk")
                bot.send_message(chat_id, MESSAGES[lang]["today_reminder"].format(text))
                reminders.remove(r)
        time.sleep(3600)

threading.Thread(target=reminder_checker).start()
bot.polling()
